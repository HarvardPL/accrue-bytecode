package analysis.dataflow.flowsensitizer;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import util.OrderedPair;

public class SensitizerFact implements LatticeJoin<SensitizerFact> {
    private final Map<Integer, Set<Integer>> m;
    private final Set<Integer> escaped;

    public static SensitizerFact makeBottom() {
        return new SensitizerFact(new HashMap<Integer, Set<Integer>>(), new HashSet<Integer>());
    }

    private SensitizerFact(Map<Integer, Set<Integer>> m, Set<Integer> escaped) {
        this.m = m;
        this.escaped = escaped;
    }

    private SensitizerFact updateM(Map<Integer, Set<Integer>> m) {
        return new SensitizerFact(m, this.escaped);
    }

    private SensitizerFact updateEscaped(Set<Integer> escaped) {
        return new SensitizerFact(this.m, escaped);
    }

    public SensitizerFact addToSetAt(int var, int sensitizer) {
        Map<Integer, Set<Integer>> m = DataFlowUtilities.deepCopyMap(this.m);

        DataFlowUtilities.putInSetMap(m, var, sensitizer);

        return updateM(m);
    }

    public SensitizerFact replaceSetAt(int var, Set<Integer> s) {
        Map<Integer, Set<Integer>> m = DataFlowUtilities.deepCopyMap(this.m);

        m.put(var, s);

        return updateM(m);
    }

    public SensitizerFact replaceSetsAt(Set<OrderedPair<Integer, Set<Integer>>> updates) {
        Map<Integer, Set<Integer>> m = DataFlowUtilities.deepCopyMap(this.m);

        for (OrderedPair<Integer, Set<Integer>> update : updates) {
            Integer key = update.fst();
            Set<Integer> s = update.snd();
            m.put(key, s);
        }

        return updateM(m);
    }

    public SensitizerFact addEscapee(int var) {
        Set<Integer> escaped = new HashSet<>(this.escaped);
        escaped.add(var);
        return updateEscaped(escaped);
    }

    public boolean isEscaped(int var) {
        return escaped.contains(var);
    }

    @Override
    public SensitizerFact join(SensitizerFact that) {
        Map<Integer, Set<Integer>> m = DataFlowUtilities.deepCopyMap(this.m);
        Set<Integer> escaped = new HashSet<>(this.escaped);

        DataFlowUtilities.combineMaps(m, that.m);
        escaped.addAll(that.escaped);

        return new SensitizerFact(m, escaped);
    }

    public Map<Integer, Set<Integer>> getMap() {
        return this.m;
    }

    /*
     * AUTOGENERATED STUFF
     *
     * Be sure to regenerate these (using Eclipse) if you change the number of fields in this class
     *
     * DEFINTIELY DONT CHANGE ANYTHING
     */

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((m == null) ? 0 : m.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof SensitizerFact)) {
            return false;
        }
        SensitizerFact other = (SensitizerFact) obj;
        if (m == null) {
            if (other.m != null) {
                return false;
            }
        }
        else if (!m.equals(other.m)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "(SensitizerFact " + m + ")";
    }

}
