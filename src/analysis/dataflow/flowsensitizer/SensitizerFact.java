package analysis.dataflow.flowsensitizer;

import java.util.HashSet;
import java.util.Set;

import util.OrderedPair;

public class SensitizerFact implements LatticeJoin<SensitizerFact> {
    private final Relation<Integer, OrderedPair<Integer, Integer>> m;
    private final Set<Integer> escaped;

    /*
     * Public Factories
     */

    public static SensitizerFact makeBottom() {
        return new SensitizerFact(Relation.<Integer, OrderedPair<Integer, Integer>> makeBottom(),
                                  new HashSet<Integer>());
    }

    /*
     * Private Constructors
     */

    private SensitizerFact(Relation<Integer, OrderedPair<Integer, Integer>> m, Set<Integer> escaped) {
        this.m = m;
        this.escaped = escaped;
    }

    /*
     * Super class interface
     */

    @Override
    public SensitizerFact join(SensitizerFact that) {
        Relation<Integer, OrderedPair<Integer, Integer>> r = this.m.join(that.m);
        Set<Integer> s = new HashSet<>(this.escaped);
        s.addAll(that.escaped);
        return new SensitizerFact(r, s);
    }

    /*
     * Logic
     */

    public SensitizerFact initTime(int varNum, int l) {
        if (this.isEscaped(varNum)) {
            return this;
        }
        else {
            Relation<Integer, OrderedPair<Integer, Integer>> r = this.m.clone();
            r.add(varNum, new OrderedPair<>(l, l));
            return updateM(r);
        }
    }

    public SensitizerFact tick(int varNum, int l) {
        if (this.isEscaped(varNum)) {
            return this;
        }
        else {
            Relation<Integer, OrderedPair<Integer, Integer>> r = this.m.clone();
            Set<OrderedPair<Integer, Integer>> s = r.get(varNum);
            Set<OrderedPair<Integer, Integer>> news = new HashSet<>(s.size());
            for (OrderedPair<Integer, Integer> p : s) {
                Integer definitionSite = p.fst();
                Integer time = p.snd();
                news.add(new OrderedPair<>(definitionSite, l));
            }
            r.replace(varNum, news);
            return updateM(r);
        }
    }

    private SensitizerFact updateM(Relation<Integer, OrderedPair<Integer, Integer>> m) {
        return new SensitizerFact(m, this.escaped);
    }

    private SensitizerFact updateEscaped(Set<Integer> escaped) {
        return new SensitizerFact(this.m, escaped);
    }

    public SensitizerFact addEscapee(int var) {
        Set<Integer> escaped = new HashSet<>(this.escaped);
        escaped.add(var);
        return updateEscaped(escaped);
    }

    public boolean isEscaped(int var) {
        return escaped.contains(var);
    }

    public SensitizerFact mustAlias(int def, int use) {
        Relation<Integer, OrderedPair<Integer, Integer>> r = this.m.clone();
        r.replace(def, r.get(use));
        return updateM(r);
    }

    public SensitizerFact mayAlias(int def, int use) {
        if (this.isEscaped(def)) {
            return this;
        }
        else {
            Relation<Integer, OrderedPair<Integer, Integer>> r = this.m.clone();
            r.addAll(def, r.get(use));
            return updateM(r);
        }
    }

    public Relation<Integer, OrderedPair<Integer, Integer>> getRelation() {
        return this.m;
    }

    public Set<Integer> getEscaped() {
        return this.escaped;
    }

    public boolean upperBounds(SensitizerFact that) {
        return this.escaped.containsAll(that.escaped) && this.m.upperBounds(that.m);
    }

    /*
     * AUTOGENERATED STUFF
     *
     * Be sure to regenerate these (using Eclipse) if you change the number of fields in this class
     *
     * DEFINTIELY DONT CHANGE ANYTHING
     */

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((escaped == null) ? 0 : escaped.hashCode());
        result = prime * result + ((m == null) ? 0 : m.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof SensitizerFact)) {
            return false;
        }
        SensitizerFact other = (SensitizerFact) obj;
        if (escaped == null) {
            if (other.escaped != null) {
                return false;
            }
        }
        else if (!escaped.equals(other.escaped)) {
            return false;
        }
        if (m == null) {
            if (other.m != null) {
                return false;
            }
        }
        else if (!m.equals(other.m)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "SensitizerFact [m=" + m + ", escaped=" + escaped + "]";
    }

}
