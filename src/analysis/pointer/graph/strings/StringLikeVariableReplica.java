package analysis.pointer.graph.strings;

import java.util.Set;

import analysis.pointer.graph.PointsToGraphNode;
import analysis.pointer.registrar.strings.StringLikeVariable;

import com.ibm.wala.ipa.callgraph.Context;
import com.ibm.wala.types.TypeReference;

public class StringLikeVariableReplica implements PointsToGraphNode, StringSolutionReplica {

    private final Context context;
    private final StringLikeVariable v;

    public StringLikeVariableReplica(Context context, StringLikeVariable v) {
        assert v != null && context != null;
        this.context = context;
        this.v = v;
    }

    @Override
    public TypeReference getExpectedType() {
        return v.getExpectedType();
    }

    @Override
    public Set<StringLikeLocationReplica> getStringLocations() {
        return this.v.getStringLocationReplicas(context);
    }

    /*
     * AUTOGENERATED STUFF
     *
     * Be sure to regenerate these (using Eclipse) if you change the number of fields in this class
     *
     * DEFINTIELY DONT CHANGE ANYTHING
     */

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((context == null) ? 0 : context.hashCode());
        result = prime * result + ((v == null) ? 0 : v.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof StringLikeVariableReplica)) {
            return false;
        }
        StringLikeVariableReplica other = (StringLikeVariableReplica) obj;
        if (context == null) {
            if (other.context != null) {
                return false;
            }
        }
        else if (!context.equals(other.context)) {
            return false;
        }
        if (v == null) {
            if (other.v != null) {
                return false;
            }
        }
        else if (!v.equals(other.v)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "(SVR " + context + " " + v + ")";
    }

}
