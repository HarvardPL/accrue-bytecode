package analysis.pointer.registrar.strings;

import com.ibm.wala.classLoader.IMethod;
import com.ibm.wala.types.TypeReference;

public class LocalStringVariable implements StringVariable {
    private final IMethod m;
    private final int varNum;
    private final int sensitizingSubscript;
    private final TypeReference klass;

    /* Factory Methods */

    public static LocalStringVariable makeString(IMethod m, int varNum, int sensitizingSubscript) {
        return new LocalStringVariable(m, varNum, sensitizingSubscript, TypeReference.JavaLangString);
    }

    public static LocalStringVariable makeStringBuilder(IMethod m, int varNum, int sensitizingSubscript) {
        return new LocalStringVariable(m, varNum, sensitizingSubscript, TypeReference.JavaLangStringBuilder);
    }

    /* Constructor */

    private LocalStringVariable(IMethod m, int varNum, int sensitizingSubscript, TypeReference klass) {
        this.m = m;
        this.varNum = varNum;
        this.sensitizingSubscript = sensitizingSubscript;
        this.klass = klass;
    }

    /* Logic */

    @Override
    public TypeReference getExpectedType() {
        return this.klass;
    }

    @Override
    public boolean isSingleton() {
        return false;
    }

    /*
     * AUTOGENERATED STUFF
     *
     * Be sure to regenerate these (using Eclipse) if you change the number of fields in this class
     *
     * DEFINTIELY DONT CHANGE ANYTHING
     */

    @Override
    public String toString() {
        return "(LSV " + varNum + "_" + sensitizingSubscript + ")";
        //        return "LocalStringVariable ["/* + "m=" + m*/+ ", varNum=" + varNum + ", sensitizingSubscript="
        //                + sensitizingSubscript
        //                + "]";
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof LocalStringVariable)) {
            return false;
        }
        LocalStringVariable other = (LocalStringVariable) obj;
        if (m == null) {
            if (other.m != null) {
                return false;
            }
        }
        else if (!m.equals(other.m)) {
            return false;
        }
        if (sensitizingSubscript != other.sensitizingSubscript) {
            return false;
        }
        if (varNum != other.varNum) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        // XXX: apparently IMethod has the wrong equality notion, according to eclipse
        result = prime * result + ((m == null) ? 0 : m.hashCode());
        result = prime * result + sensitizingSubscript;
        result = prime * result + varNum;
        return result;
    }

}
