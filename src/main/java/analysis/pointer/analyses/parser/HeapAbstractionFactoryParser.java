
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 10 19:10:33 EDT 2014
//----------------------------------------------------

package analysis.pointer.analyses.parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import util.OrderedPair;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 10 19:10:33 EDT 2014
  */
public class HeapAbstractionFactoryParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public HeapAbstractionFactoryParser() {super();}

  /** Constructor which sets the default scanner. */
  public HeapAbstractionFactoryParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public HeapAbstractionFactoryParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\003\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\002\003\000\002\002\006" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\011\005\000\002\005" +
    "\003\000\002\005\005\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\016\004\014\005\006\006\004\007\011\014" +
    "\017\017\016\001\002\000\012\002\ufff9\011\ufff9\012\ufff9" +
    "\015\ufff9\001\002\000\014\002\ufff7\010\034\011\ufff7\012" +
    "\ufff7\015\ufff7\001\002\000\012\002\ufffa\011\ufffa\012\ufffa" +
    "\015\ufffa\001\002\000\010\002\001\011\001\015\001\001" +
    "\002\000\006\002\033\011\022\001\002\000\012\002\ufff8" +
    "\011\ufff8\012\ufff8\015\ufff8\001\002\000\014\002\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\015\ufff6\001\002\000\014\002\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\015\ufff5\001\002\000\012\002" +
    "\ufffb\011\ufffb\012\ufffb\015\ufffb\001\002\000\012\002\ufffd" +
    "\011\ufffd\012\024\015\ufffd\001\002\000\014\002\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\015\ufff4\001\002\000\016\004\014" +
    "\005\006\006\004\007\011\014\017\017\016\001\002\000" +
    "\006\011\022\015\021\001\002\000\010\002\ufffe\011\ufffe" +
    "\015\ufffe\001\002\000\014\004\014\005\006\006\004\007" +
    "\011\017\016\001\002\000\010\002\uffff\011\uffff\015\uffff" +
    "\001\002\000\004\016\027\001\002\000\006\011\ufff2\013" +
    "\ufff2\001\002\000\006\011\030\013\031\001\002\000\006" +
    "\011\ufff0\013\ufff0\001\002\000\004\016\027\001\002\000" +
    "\010\002\ufffc\011\ufffc\015\ufffc\001\002\000\006\011\ufff1" +
    "\013\ufff1\001\002\000\004\002\000\001\002\000\004\017" +
    "\035\001\002\000\014\002\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\015\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\016\002\006\003\007\004\014\007\004\010" +
    "\011\011\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\006\003\017\004\014\007\004\010\011\011\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\022\004" +
    "\014\007\004\010\011\011\012\001\001\000\002\001\001" +
    "\000\006\005\025\006\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HeapAbstractionFactoryParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HeapAbstractionFactoryParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HeapAbstractionFactoryParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    HeapAbstractionFactoryLexer lexer;
    List<OrderedPair<String, List<Integer>>> classesAndArgs = new LinkedList<>();
        
   public HeapAbstractionFactoryParser(InputStream str) {
        super(new HeapAbstractionFactoryLexer(str));
        lexer = (HeapAbstractionFactoryLexer)getScanner();
    }
    
    public HeapAbstractionFactoryParser(Reader r) {
        super( new HeapAbstractionFactoryLexer(r) );
        lexer = (HeapAbstractionFactoryLexer)getScanner();
    }
    
    public static List<OrderedPair<String, List<Integer>>> parse(String hafString) throws Exception {
        StringReader reader = new StringReader(hafString);
        HeapAbstractionFactoryParser p = new HeapAbstractionFactoryParser(reader);
        return (List<OrderedPair<String, List<Integer>>>) p.parse().value;  
    }
    
    public void report_error(String message) {
        throw new RuntimeException("HeapAbstractionFactory parser error: " + message);
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$HeapAbstractionFactoryParser$actions {
  private final HeapAbstractionFactoryParser parser;

  /** Constructor */
  CUP$HeapAbstractionFactoryParser$actions(HeapAbstractionFactoryParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$HeapAbstractionFactoryParser$do_action(
    int                        CUP$HeapAbstractionFactoryParser$act_num,
    java_cup.runtime.lr_parser CUP$HeapAbstractionFactoryParser$parser,
    java.util.Stack            CUP$HeapAbstractionFactoryParser$stack,
    int                        CUP$HeapAbstractionFactoryParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HeapAbstractionFactoryParser$result;

      /* select the action based on the action number */
      switch (CUP$HeapAbstractionFactoryParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arg ::= INT_LITERAL 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 RESULT = Integer.valueOf(i); 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("arg",4, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // args ::= args COMMA arg 
            {
              List<Integer> RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)).right;
		List<Integer> as = (List<Integer>)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 as.add(a); 
           RESULT = as; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("args",3, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // args ::= arg 
            {
              List<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 List<Integer> argList = new ArrayList<>();
           argList.add(a);
           RESULT = argList; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("args",3, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // qualified_name ::= name DOT IDENTIFIER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 RESULT = n + "." + i; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("qualified_name",7, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_name ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 RESULT = i; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("simple_name",6, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // name ::= qualified_name 
            {
              String RESULT =null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		String qn = (String)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 RESULT = qn; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("name",5, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // name ::= simple_name 
            {
              String RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		String sn = (String)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 RESULT = sn; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("name",5, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // className ::= name 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 RESULT = s; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("className",2, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // className ::= FULL 
            {
              String RESULT =null;
		 RESULT = "analysis.pointer.analyses.FullObjSensitive"; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("className",2, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // className ::= CS 
            {
              String RESULT =null;
		 RESULT = "analysis.pointer.analyses.CallSiteSensitive"; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("className",2, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // className ::= SCS 
            {
              String RESULT =null;
		 RESULT = "analysis.pointer.analyses.StaticCallSiteSensitive"; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("className",2, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // className ::= TYPE 
            {
              String RESULT =null;
		 RESULT = "analysis.pointer.analyses.TypeSensitive"; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("className",2, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= className LPAR args RPAR 
            {
              OrderedPair<String,List<Integer>> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-1)).right;
		List<Integer> as = (List<Integer>)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-1)).value;
		 RESULT = new OrderedPair<> (c, as); 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("class",0, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-3)), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= className 
            {
              OrderedPair<String,List<Integer>> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 RESULT = new OrderedPair<> (c, Collections.<Integer> emptyList()); 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("class",0, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classes ::= LBRACK classes RBRACK 
            {
              List<OrderedPair<String,List<Integer>>> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-1)).right;
		List<OrderedPair<String,List<Integer>>> cs = (List<OrderedPair<String,List<Integer>>>)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-1)).value;
		 RESULT = cs; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("classes",1, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classes ::= classes COMMA class 
            {
              List<OrderedPair<String,List<Integer>>> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)).right;
		List<OrderedPair<String,List<Integer>>> cs = (List<OrderedPair<String,List<Integer>>>)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		OrderedPair<String,List<Integer>> c = (OrderedPair<String,List<Integer>>)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 cs.add(c); 
           RESULT = cs; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("classes",1, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-2)), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= classes EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-1)).right;
		List<OrderedPair<String,List<Integer>>> start_val = (List<OrderedPair<String,List<Integer>>>)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-1)).value;
		RESULT = start_val;
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.elementAt(CUP$HeapAbstractionFactoryParser$top-1)), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$HeapAbstractionFactoryParser$parser.done_parsing();
          return CUP$HeapAbstractionFactoryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // classes ::= class 
            {
              List<OrderedPair<String,List<Integer>>> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()).right;
		OrderedPair<String,List<Integer>> c = (OrderedPair<String,List<Integer>>)((java_cup.runtime.Symbol) CUP$HeapAbstractionFactoryParser$stack.peek()).value;
		 List<OrderedPair<String, List<Integer>>> classList = new ArrayList<>();
           classList.add(c);
           RESULT = classList; 
              CUP$HeapAbstractionFactoryParser$result = parser.getSymbolFactory().newSymbol("classes",1, ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HeapAbstractionFactoryParser$stack.peek()), RESULT);
            }
          return CUP$HeapAbstractionFactoryParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

