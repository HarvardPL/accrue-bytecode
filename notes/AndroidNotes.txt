XXX integer arguments are not initialized by entry.addCall(fakeRoot)

TODO change addClassInitializers in PointsToGraph to call addEntryPoint in the loop
TODO Add initial Activity callbacks to fakeRoot, could add all of them or just add the LAUNCHER and add the rest by recognizing "startActivity" calls in the app

"Activities, services, and content providers that you include in your source but do not declare in the manifest are not visible to the system and, consequently, can never run. However, broadcast receivers can be either declared in the manifest or created dynamically in code (as BroadcastReceiver objects) and registered with the system by calling registerReceiver()."

"As discussed above, in Activating Components, you can use an Intent to start activities, services, and broadcast receivers. You can do so by explicitly naming the target component (using the component class name) in the intent. However, the real power of intents lies in the concept of implicit intents. An implicit intent simply describes the type of action to perform (and, optionally, the data upon which youâ€™d like to perform the action) and allows the system to find a component on the device that can perform the action and start it. If there are multiple components that can perform the action described by the intent, then the user selects which one to use. The way the system identifies the components that can respond to an intent is by comparing the intent received to the intent filters provided in the manifest file of other apps on the device."

"Caution: To ensure your app is secure, always use an explicit intent when starting a Service and do not declare intent filters for your services. Using an implicit intent to start a service is a security hazard because you cannot be certain what service will respond to the intent, and the user cannot see which service starts."

"You can set the component name with setComponent(), setClass(),setClassName(), or with the Intent constructor."

"Note: An explicit intent is always delivered to its target, regardless of any intent filters the component declares."

"A PendingIntent object is a wrapper around an Intent object. The primary purpose of a PendingIntent is to grant permission to a foreign application to use the contained Intent as if it were executed from your app's own process."

ME: Intent-sensitive pointer analysis. Or something similar. It looks like Android may be ripe for a domain specific pointer analysis using a special HAF. We want to be able to track who made the intent so it might look like "sticky" object sensitive.

ME: I know scaling is an issue, but it looks like security is a global property. Can we do anything with interacting Apps? I think a lite version of the query-driven pointer analysis may shine here. If I want to know where GPS goes within a certain app then see where it requests GPS, but also other requests that may be influenced by the GPS. How does the system protect a particular app from leaking GPS via some other intent? I'm guessing it doesn't at all. Which means that two malicious apps may be secure in isolation, and insecure when colluding.

ME: Intents can be implicit. This suggests some sort of whole-system security.

ME: Declaring implicit intents should be a source of that type of data wherever the entry point is

ME: intents can be delivered to apps that do not declare them, again whole-system security concerns

ME: It looks like an Instrumentation overrider could bypass the startActivityMethod and directy call execStartActivity
-- This throws a run time error "cannot be called from main thread" or something

**Research ideas**
Rewrite apps so they match a given spec.
1. Analyze and test spec.
2. Find potential violations
3. Insert runtime checks
4. Rewrite code
-User selects permissions. Regen code to match new policy.
-User defined global policies
-Emulate iphone model. Ask user for permission to leak
****

Intents can be instantiated via URI (Ugh!) Intent.parseURI(String, int)

Policy: no opaque strings into Intents