Any particular reason edges live in the nodes in the Flowgraph?
A: not really

Do I have to iterate through SCCs or can I use a single workqueue instead?
A: Yes its better, do the simple way first

I don't really like the WALA CFG for data-flow. It is over basic blocks so no generated exceptions from instructions
A: It actual does the right thing apparently

For a data-flow analysis with side effects (e.g. printing) do I have to keep a set of visited nodes, this seems a bit hackish, but to avoid duplicates it might be unavoidable (we don't want to reanalyze).
A: its not really a data-flow

Should null data-flow items be allowed? Should they be propagated?
Polyglot says yes for the first and no for the second
A: decide and go with it, could create default item, createInitialItem(Edge)

Do I actually need a lattice and confluence or should I let the individual analysis decide how to compute the meet of the incoming edges (if they even need to).
A: Add back in predecessor to Set of input flow items, look at book

Do we actually need to hashcons the varcontexts?
A: Performance

Widen is never not the same as upperbound.
A: Widen

Do I need to handle IllegalMonitorStateExceptions for return statements
A: Skip it

How about WrongMethodTypeException for virtual methods
A: check the method name and add it

Q: Do I need exception in VarContext if there is a local for the exception, the local is what I use in the pointer analysis, probably should use it here too.

Q: PDG: should we add a PC for the call program point in the caller, what could that help? This would look similar to a "FORMAL_ASSIGNMENT" node

WALA-BUG: getLastInstructionIndex() on ISSABasic block delegates to the Shrike BB, but instruction at some indices are removed in translation, so this instruction might be null (and getLastInstruction() returns null).

WALA-BUG: Using methods from AbstractNumberedGraph in BasicCallGraph breaks the abstraction barrier (for example addNode bipasses the memoization of findOrCreateNode). This should be a delegation relationship not inheritance.

WALA-BUG: By default the fake root method has no return statement so it had normal and exception edges from a basic block to the exit block.

TODO multiple edges are added to the points to graph for generated exceptions, this might be OK, but it does look like there may be duplicate edges in the PTG maybe from the final check pass? Why isn't hashcode/equals deduping for me

TODO Is the fact that Arrays are sometimes Objects in WALA screw things up anywhere? probably in some unexpected way especially since Object is not considerend a subclass of Arrays, should use isAssignable from everywhere

TODO need to be more careful with exception types, Sometimes a filter is getting rid of exceptions from a call since that is "Throwable" and the exceptions could be anything, we can wait for the precise ex to take care of this. Maybe mark certain refVars as not precise

TODO record the choice of receiver in the PC for PDGs

TODO String should call <init> after allocation not the value field hack, read about Strings in the JVM spec 5.1